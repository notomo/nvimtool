
call themis#option('recursive', 1)

let s:root = getcwd()

function! TestHelper() abort
    let helper = {
        \ 'assert': s:assert(),
    \ }

    function! helper.before_each() abort
        execute 'cd' s:root

        call themis#log('')

        filetype on
        syntax enable
    endfunction

    function! helper.after_each() abort
        silent! %bwipeout!
        execute 'cd' s:root

        filetype off
        syntax off
    endfunction

    function! helper.suite(name) abort
        let suite = themis#suite(a:name)
        let suite.before_each = self.before_each
        let suite.after_each = self.after_each
        return suite
    endfunction

    function! helper.search(pattern) abort
        let result = search(a:pattern)
        if result == 0
            let message = printf('%s not found', a:pattern)
            call self.assert.fail(message)
        endif
        return result
    endfunction

    function! helper.replace_line(new_line) abort
        call setline('.', a:new_line)
    endfunction

    return helper
endfunction

function! s:assert() abort
    let assert = themis#helper('assert')

    function! assert.window_count(expected) abort
        let actual = tabpagewinnr(tabpagenr(), '$')
        let message = printf('window count must be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.window_row(expected) abort
        let actual = nvim_win_get_config(0).row
        let message = printf('window row must be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.window_col(expected) abort
        let actual = nvim_win_get_config(0).col
        let message = printf('window col must be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    function! assert.window_width(expected) abort
        let actual = nvim_win_get_width(0)
        let message = printf('window width must be %s, but actual: %s', a:expected, actual)
        call self.equals(actual, a:expected, message)
    endfunction

    return assert
endfunction
